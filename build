#!/bin/bash
USER="dev"
NAME="UIUC Dev"
HOST="uiuc-vm"

# Usage
if [ "$#" -lt "2" ]; then
	echo "Usage: $0 arch outfile [debug-file]"
	exit 1
fi

# Turn on Debug Messages
OUT="/dev/null"
if [ "$#" -ge "3" ]; then
	OUT="$3"
	echo -n "" > "$OUT"
fi

# Parse Architecture
ARCH="$1"
if [[ "$ARCH" = "x86" || "$ARCH" = "32" ]]; then
	ARCH="i686"
	OS="ArchLinux"
	VMNAME="UIUC VM 32"
elif [[ "$ARCH" = "amd64" || "$ARCH" = "64" ]]; then
	ARCH="x86_64"
	OS="ArchLinux_64"
	VMNAME="UIUC VM 64"
elif [[ "$ARCH" != "x86_64" && "$ARCH" != "i686" ]]; then
	echo "Invalid Architecture $ARCH."
	exit 1
fi

# Must run as root
if [ "$(id -u)" -ne "0" ]; then
	echo "You must be running as root"
	exit 1
fi

# Install the required tools
PACMAN=$(which pacman 2>/dev/null)
if [ ! -x "$PACMAN" ]; then
	echo "Not on an archlinux system"
	exit 1
fi
PACKAGES="qemu-kvm virtualbox gptfdisk e2fsprogs arch-install-scripts"
$PACMAN -Sy --needed --noconfirm $PACKAGES >>$OUT 2>&1
if [ "$?" -ne "0" ]; then
	echo "Failed to install base dependencies"
	exit 1
fi

# Setup Cleanup Hook
cleanup() {
	echo "Cleaning Up"
	eval 'umount $DIR/boot 2>/dev/null'
	eval 'umount $DIR 2>/dev/null'
	eval 'loop_down "$LOOP" 2>/dev/null'
	eval 'qemu-nbd -d "$DEV" >/dev/null 2>&1'
	eval 'vboxmanage unregistervm "{8968673b-95a0-4875-8929-340a50a00a22}" --delete >/dev/null 2>&1'
	eval 'rm -f "$DISK"'
	eval 'rm -f "$DISK2"'
	eval 'rm -rf "$DIR"'
	exit $1
}
trap 'cleanup 1' INT QUIT

# Setup Temp
CONF="$(dirname "$(readlink -f "$0")")"
DIR="$(mktemp -d)"

# Create the virtual disk image
echo "Creating Image File"
DISK="$2.tmp"
[ -f "$DISK" ] && rm -f "$DISK"
qemu-img create -f qcow2 "$DISK" 100G >>$OUT 2>&1

# Mount the Disk
modprobe nbd
FILES="$(ls /dev | grep nbd)"
for FILE in $FILES; do
	DEV="/dev/$FILE"
	qemu-nbd -n -c "$DEV" "$DISK" >/dev/null 2>&1
	[ "$?" -eq "0" ] && break
	DEV=""
done
if [ "$DEV" = "" ]; then
	echo "Failed to mount the virtual disk"
	cleanup 1
fi

# Check for the virtual block device
if [ ! -b "$DEV" ]; then
	echo "Invalid Block Device!"
	cleanup 1
fi

# Setup Partition Table
echo "Creating Partition Table"
sgdisk -z "$DEV" >>$OUT 2>&1
sgdisk -o "$DEV" >>$OUT 2>&1
sgdisk -n 1:2048:+1M "$DEV" >>$OUT 2>&1
sgdisk -t 1:EF02 "$DEV" >>$OUT 2>&1
sgdisk -n 2::+4G "$DEV" >>$OUT 2>&1
sgdisk -n 3:: "$DEV" >>$OUT 2>&1

# Make BIOS Bootable
sgdisk -A 3:set:2 "$DEV" >>$OUT 2>&1

# Disk Operations
BS="$(sudo gdisk -l "$DEV" | grep "Logical sector" | awk '{print $4}')"
offset() {
	echo $(expr $(sudo sgdisk "$DEV" -i "$1" | grep "First sector" | awk '{print $3}') \* $BS)
}
size() {
	echo $(expr $(sudo sgdisk "$DEV" -i "$1"| grep size | awk '{print $3}') \* $BS)
}
loop_up() {
	losetup -P -f --show "$DEV" 2>>$OUT
}
loop_down() {
	sleep 1
	losetup -d "$1" >>$OUT 2>&1
}

# Format Disk
echo "Formatting Paritions"
LOOP="$(loop_up)"
mkswap -L swap "${LOOP}p2" >>$OUT 2>&1
mkfs.ext4 -L root "${LOOP}p3" >>$OUT 2>&1

# Mount the disk
echo "Mounting Paritions"
mount "${LOOP}p3" "$DIR" >>$OUT 2>&1

# Setup Package List
BASE="bash bzip2 coreutils cronie dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext glibc grep gzip inetutils iproute2 iputils less licenses linux logrotate man-db man-pages netctl pacman procps-ng psmisc sed shadow sysfsutils systemd-sysvcompat tar texinfo usbutils util-linux vi which"
DEVEL="base-devel libpng gnuplot imagemagick graphviz gdb valgrind"
EDITORS="gvim emacs gedit"
NET="wget ntp subversion git ifplugd iptables"
SYS="sudo openssh lzop grub zsh mlocate sshpass"
X11="xfce4 xfce4-goodies slim epdfview chromium firefox xorg-server xorg-xinit virtualbox-guest-modules virtualbox-guest-utils xf86-input-mouse xf86-input-keyboard gnome-themes-standard ttf-dejavu ttf-liberation"

# Run Pacman to Install Packages
echo "Installing Packages"
pacstrap -c "$DIR" $BASE $DEVEL $EDITORS $NET $SYS $X11 --arch "$ARCH" --config "$CONF/sys/pacman.conf" >>$OUT 2>&1

# Copy configuration
echo "Configuring System"
cp -r "$CONF/sys/etc" "$DIR" 2>/dev/null
cp -r "$CONF/sys/home" "$DIR/home/$USER" 2>/dev/null

# Setup Hostname
echo "$HOST" > "$DIR/etc/hostname"
echo "127.0.0.1 localhost localhost.uiuc" > "$DIR/etc/hosts"
echo "::1 localhost localhost.uiuc" > "$DIR/etc/hosts"

# Link Vi if replacing
#echo "ln -s /usr/bin/vim /usr/bin/vi" >> "$DIR/setup"

# Generate the Fstab
#genfstab -U "$DIR" >> "$DIR/etc/fstab"

# Install Grub
echo "grub-install --recheck --no-floppy \"$DEV\"" >> "$DIR/setup"
echo "grub-mkconfig -o /boot/grub/grub.cfg" >> "$DIR/setup"

# Setup Locale
echo "locale-gen" >> "$DIR/setup"

# Build Initramfs
echo "mkinitcpio -p linux" >> "$DIR/setup"

# Setup Systemd Services
echo "systemctl enable cronie.service" >> "$DIR/setup"
echo "systemctl enable netctl-ifplugd@enxdeadbeefcafe.service" >> "$DIR/setup"
echo "systemctl enable ntpd.service" >> "$DIR/setup"
echo "systemctl enable slim.service" >> "$DIR/setup"
echo "systemctl enable sshd.service" >> "$DIR/setup"

# Setup Timezone
echo "ln -s /usr/share/zoneinfo/America/Chicago /etc/localtime" >> "$DIR/setup"

# Setup Sudoers
echo "echo \"%sudo ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers" >> "$DIR/setup"

# Add Default User
echo "echo \"default_user $USER\" >> /etc/slim.conf" >> "$DIR/setup"
echo "groupadd sshaccess" >> "$DIR/setup"
echo "groupadd sudo" >> "$DIR/setup"
echo "useradd -s /bin/zsh -G sshaccess,sudo $USER" >> "$DIR/setup"
echo "chfn -f \"$NAME\" $USER" >> "$DIR/setup"
echo "chown -R $USER:users /home/$USER" >> "$DIR/setup"
REPO="$(git remote show -n origin | grep "Fetch URL" | awk '{print $3}')"
echo "su -l -c \"git clone \\\"$REPO\\\" /home/$USER/.vmtools\" $USER" >> "$DIR/setup"
echo "su -l -c \"/home/$USER/.vmtools/install-base\" $USER" >> "$DIR/setup"
echo "chmod -R +x /home/$USER/Desktop" >> "$DIR/setup"

# Run the Setup Script
arch-chroot "$DIR" "/bin/sh" "/setup" >>$OUT 2>&1
shred "$DIR/setup"
rm -f "$DIR/setup"

# Unmount and finalize QCow Image
echo "Unmounting and Syncing Partitions"
sync
umount $DIR/boot 2>/dev/null
umount $DIR 2>/dev/null
sync
loop_down "$LOOP"
qemu-nbd -d "$DEV" >/dev/null 2>&1
sync

# Convert to a Virtualbox Image
echo "Converting Image to Virtualbox Format"
DISK2="$2.vdi"
qemu-img convert -f qcow2 -O vdi "$DISK" "$DISK2" >>$OUT 2>&1

# Create the Virtualbox Machine
echo "Building the Virtualbox OVA"
VBOX_ORIG="$CONF/build_files/vm.vbox"
VBOX="$DIR/vm.vbox"
cp "$VBOX_ORIG" "$VBOX" >/dev/null 2>&1
sed -i "s/{OSTYPE}/$OS/g" "$VBOX"
sed -i "s/{NAME}/$VMNAME/g" "$VBOX"
vboxmanage unregistervm "{8968673b-95a0-4875-8929-340a50a00a22}" >/dev/null 2>&1
vboxmanage registervm "$VBOX" >>$OUT 2>&1
vboxmanage storageattach "{8968673b-95a0-4875-8929-340a50a00a22}" --storagectl "SATA Controller" --port 0 --type hdd --medium "$(pwd)/$DISK2" >>$OUT 2>&1
vboxmanage export "{8968673b-95a0-4875-8929-340a50a00a22}" --output "$(pwd)/$2.ova" --vsys 0 --product "UIUC VM" --producturl "https://wiki.engr.illinois.edu/display/cs225/Virtual+Machine" --vendor "CS 225 Course Staff" --vendorurl "https://wiki.engr.illinois.edu/display/cs225/Home" --version "1.0" >>$OUT 2>&1

# Cleanup
cleanup 0
